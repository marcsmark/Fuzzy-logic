# -*- coding: utf-8 -*-
"""ant_col_alg.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qXg6CuLbCdHiIQzcGoRQ8s8SasHTTDhB
"""

import numpy as np

# Initialize the pheromone matrix for each edge between cities.
def initialize_pheromones(number_of_cities):
    return np.ones((number_of_cities, number_of_cities))

# Initialize the initial positions of ants in nodes (cities) randomly.
def initialize_ants(number_of_ants, number_of_cities):
    return np.random.choice(number_of_cities, size=(number_of_ants, number_of_cities))

# Update pheromone levels on edges based on paths taken by ants.
def update_pheromones(pheromones, paths, Q, rho, distance_matrix):
    pheromones *= (1 - rho)
    for path in paths:
        for i in range(len(path) - 1):
            current, next_city = path[i], path[i + 1]
            pheromones[current, next_city] += Q / distance_matrix[current, next_city]
            pheromones[next_city, current] = pheromones[current, next_city]

# Choose a path based on pheromone and distance probabilities.
def choose_path(pheromones, alpha, beta, distance_matrix):
    number_of_cities = len(pheromones)
    current_city = np.random.choice(number_of_cities)
    unvisited_cities = list(range(number_of_cities))
    unvisited_cities.remove(current_city)
    path = [current_city]

    while unvisited_cities:
        probabilities = []

        for city in unvisited_cities:
            distance = distance_matrix[current_city, city]
            probability = (pheromones[current_city, city] ** alpha) * ((1 / distance) ** beta)
            probabilities.append(probability)

        probabilities = probabilities / np.sum(probabilities)
        chosen_city = np.random.choice(unvisited_cities, p=probabilities)
        unvisited_cities.remove(chosen_city)

        path.append(chosen_city)
        current_city = chosen_city

    return path

# Find the best path among all found paths.
def find_best_path(paths, distance_matrix):
    best_path = None
    best_distance = float('inf')

    for path in paths:
        total_distance = 0
        for i in range(len(path) - 1):
            total_distance += distance_matrix[path[i], path[i + 1]]

        if total_distance < best_distance:
            best_distance = total_distance
            best_path = path

    return best_path, best_distance

# Main function for ACO (Ant Colony Optimization) solving the traveling salesman problem.
def aco_tsp(number_of_ants, number_of_iterations, distance_matrix, alpha, beta, Q, rho):
    number_of_cities = len(distance_matrix)

    pheromones = initialize_pheromones(number_of_cities)
    best_global_path = None
    best_global_distance = float('inf')

    for iteration in range(number_of_iterations):
        paths = []

        for i in range(number_of_ants):
            path = choose_path(pheromones, alpha, beta, distance_matrix)
            paths.append(path)

        update_pheromones(pheromones, paths, Q, rho, distance_matrix)

        best_local_path, best_local_distance = find_best_path(paths, distance_matrix)

        if best_local_distance < best_global_distance:
            best_global_distance = best_local_distance
            best_global_path = best_local_path

        print(f"Iteration {iteration + 1}/{number_of_iterations}: Best distance: {best_global_distance}")
        print("Best path:", best_global_path)

    return best_global_path, best_global_distance


# City names = ["Porec", "Buzet", "Labin", "Umag", "Pazin", "Rabac", "Zminj","Pula", "Rovinj"]
Istria_distance_matrix = np.array([  #ISTRA
    [0.0, 46.8, 66.1, 31.7, 32.7, 70.7, 36.4, 58.9, 35.8],
    [46.6, 0.0, 52.3, 45.4, 37.5, 57.3, 53.1, 90.0, 73.2],
    [65.2, 52.5, 0.0, 90.7, 29.2, 5.0, 29.5, 43.0, 54.4],
    [31.6, 47.7, 91.6, 0.0, 59.0, 96.2, 61.9, 84.4, 67.7],
    [32.3, 37.6, 29.2, 58.5, 0.0, 34.1, 17.0, 53.9, 36.6],
    [70.2, 57.6, 5.2, 95.6, 34.3, 0.0, 34.4, 48.0, 59.3],
    [35.6, 52.6, 29.5, 61.1, 16.8, 34.1, 0.0, 42.1, 24.8],
    [60.2, 90.1, 43.8, 85.6, 54.3, 48.4, 42.0, 0.0, 36.1],
    [34.4, 72.7, 54.7, 69.2, 27.4, 59.3, 40.8, 25.0, 0.0],
])

# Setting algorithm parameters
number_of_ants = 10
number_of_iterations = 20
alpha = 1.0
beta = 2.0
Q = 1.0
rho = 0.5

# Running the algorithm
best_path, best_distance = aco_tsp(number_of_ants, number_of_iterations, Istria_distance_matrix, alpha, beta, Q, rho)

# Printing the results
print("--------------------------------------------------------\n")
print(f"After all iterations, the best path is: {best_path}")
print(f"After all iterations, the best distance is: {best_distance}")