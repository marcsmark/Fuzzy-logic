# -*- coding: utf-8 -*-
"""fuzzy_inf2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16nAEXxhm4BVHUeku5FHjzzeqxXkC8UrO

https://pythonhosted.org/scikit-fuzzy/auto_examples/plot_tipping_problem_newapi.html
"""

!pip install scikit-fuzzy

# Fuzzy inference
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Input variables
lighting = ctrl.Antecedent(np.arange(0, 101, 1), 'lighting')
# Output
light_intensity = ctrl.Consequent(np.arange(0, 101, 1), 'light_intensity')

# Define membership functions
lighting['dark'] = fuzz.trimf(lighting.universe, [0, 0, 50])
lighting['moderate'] = fuzz.trimf(lighting.universe, [0, 50, 100])
lighting['bright'] = fuzz.trimf(lighting.universe, [50, 100, 100])

light_intensity['weak'] = fuzz.trimf(light_intensity.universe, [0, 0, 50])
light_intensity['moderate'] = fuzz.trimf(light_intensity.universe, [0, 50, 100])
light_intensity['strong'] = fuzz.trimf(light_intensity.universe, [50, 100, 100])

# Set rules
rule1 = ctrl.Rule(lighting['dark'], light_intensity['weak'])
rule2 = ctrl.Rule(lighting['moderate'], light_intensity['moderate'])
rule3 = ctrl.Rule(lighting['bright'], light_intensity['strong'])

# Create control system and simulation
light_control_system = ctrl.ControlSystem([rule1, rule2, rule3])
light_simulation = ctrl.ControlSystemSimulation(light_control_system)

#######
light_value = 99
light_simulation.input['lighting'] = light_value
light_simulation.compute()

light_intensity_membership = {}
for label in light_intensity.terms:
  membership = fuzz.interp_membership(
      light_intensity.universe, light_intensity[label].mf,
      light_simulation.output['light_intensity'])
  light_intensity_membership[label] = membership

best_light_intensity = max(
    light_intensity_membership, key=light_intensity_membership.get)

print("Observed lighting value:", light_value)
print("Light intensity:", light_simulation.output['light_intensity'])
print("Recommended light intensity:", best_light_intensity)

light_intensity.view(sim=light_simulation)